# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015-2016 by EcpyPulses Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""
"""
from atom.api import Atom, ForwardTyped, List, Unicode
from enaml.layout.api import hbox, spacer
from enaml.core.api import Conditional, Include
from enaml.widgets.api import (PushButton, ObjectCombo, Action, Container,
                               Dialog)

from ecpy.utils.widgets.qt_list_str_widget import QtListStrWidget
from ecpy.utils.transformers import ids_to_unique_names


# Circular import protection
def pulses_manager():
    from ..plugin import PulsesManagerPlugin
    return PulsesManagerPlugin


# TODO would be nicer with regex but I never managed to get the regex right.
def normalize_name(name):
    """Normalize names.

    For tasks, replaces '_' by spaces and add spaces between 'aA' sequences.
    For templates, only the extension file is removed.

    """
    if name.endswith('.sequence.ini'):
        name, _, _ = name.rsplit('.', 2)
        return name.capitalize()

    if name.endswith('Sequence'):
        name = name[:-8] + '\0'

    package = None
    if '.' in name:
        package, name = name.rsplit('.', 1)

    aux = ''
    for i, char in enumerate(name):
        if char == '_':
            aux += ' '
            continue

        if char != '\0':
            if char.isupper() and i != 0:
                if name[i-1].islower():
                    if name[i+1].islower():
                        aux += ' ' + char.lower()
                    else:
                        aux += ' ' + char
                else:
                    if name[i+1].islower():
                        aux += ' ' + char.lower()
                    else:
                        aux += char
            else:
                if i == 0:
                    aux += char.upper()
                else:
                    aux += char

    return package + '.' + aux if package else aux
    

enamldef SequenceSelector(Container): sel:
    """ Simple sequence selector supporting filtering.

    """
    #: Reference to the sequence manager (aka: the plugin)
    attr manager

    #: Flag indicating whether or not to display the filter selection dialog.
    attr display_filters : bool = True

    #: Currently selected filter.
    attr selected_filter = 'All'
    selected_filter ::
        if selected_filter:
            sequences = manager.list_sequences(selected_filter)
            if sequences:
                self.sequences = sequences
            else:
                self.sequences = ['']
        else:
            self.sequences = manager.list_sequences('All')

    #: List of all sequences
    attr sequences = manager.list_sequences('All')

    #: Mappping between user understandable names and ids.
    attr _sequence_map << (ids_to_unique_names(sequences, normalize_name,
                                               preformatter=normalize_name)
                           if sequences else {})

    #: Currently selected sequence.
    attr selected_sequence = _sequence_map[sorted(_sequence_map)[0]]


    Conditional:
        condition << display_filters
        ObjectCombo:
            items << sorted(manager.filters)
            selected := selected_filter

    QtListStrWidget: s_select:
        items << sorted(_sequence_map)
        selected_item ::
            new_seq = change['value']
            if new_seq:
                sel.selected_sequence = _sequence_map[new_seq]

